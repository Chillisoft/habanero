$H2$: Chapter 2

Enterprise applications:
-	Typically involve object persistence (often for very long periods of time). 
-	Will usually be subject to significant changes over their life cycle as the business adapts current business processes and implements new processes.
-	Will usually involve many concurrent users.
-	Have many user interfaces for capturing, viewing and organizing data.
-	Produce and maintain data that is used extensively for business analysis and reporting.
-	Often integrate with other enterprise applications.
-	Are affected by all the political and business decisions that are made and need to be supported. Business systems will therefore often refuse to be standardized according to a software developer’s logic.
If you want a more detailed description of enterprise applications, the problems presented and common solutions then refer to Patterns of Enterprise Application Architecture by Martin Fowler which is in our opinion one of the best books on this topic

$REViEW{
$H3$: Habanero

Principles driving the development of the Habanero Architecture
Automate the tasks common to programming and enterprise application. Make the difficult programming tasks easy and the complex tasks doable.
Dry (Do not repeat).
Objectives of the framework.
Maximise Coherence, Minimise Coupling, Eliminate Duplication.
Work equally well for Web (ASP), Web (AJAX enabled) and Windows application. Providing a responsive interface required for windows applications and providing a postback response interface required for Web (ASP) while suffering no performance loss for due to the additional capabilities provided for Windows application.
Provide a Business object framework that allows the UI/Application developer a natural programming experience where the complexities of … are hidden
}$

A Layered architecture. For the time being we will be discussing the logical architecture. The logical architecture separates the architecture into its layers based on a logical separation of responsibilities. The physical architecture relates to the actual physical deployment of the software i.e. which computers the various components are deployed onto. The logical architecture is thus independent of the physical architecture. It is important that a layered architecture is implemented regardless of the physical architecture.  The reasons for this are numerous and most of them come back to the separation of responsibility. Traditionally application architectures have been separated into 3 layers.

$FIGURE$:Figure2-1.vsd:The Traditional 3 layers architecture

$H4$: Presentation Layer (UI Layer)

The presentation layer is solely responsible for the communication with the user, which is typically via forms and reports. Although we think of the presentation layer as primarily relating to Graphical intefaces the presentation layer of an application would include webservices that you publish, command line calls, batch processing interfaces etc. There should be no business logic in the presentation layer due to the fact that it is difficult to test via automated tests and maintain in this layer. The presentation layer layer handles the user interface presentation and navigation. From this it can be seen that the presentation layer can actually be subdivided into two layers. The Presentation layer follows the MVP pattern $TODO{Reference Pattern}$  with a passive view, which means that the views (the top UI layer) are managed and directed by the presentation layer. The presenters are responsible for giving the views their data, pulling data from the views to be saved in the lower layers, and in general for responding to events raised by the views.

$H4$: Business logic layer (Domain Model layer)

The business logic layer is the layer where all business/domain specific logic resides. The business logic contains
1. The static rules and Business Object model, which contain the Entities of concern in the business domain (Business Objects/Entity Objects), the rules for how these objects relate to each other, the properties, the behaviour and the validation rules for the object (e.g. what properties are compulsory).
2. The dynamic and business process rules used to process logic in the business (e.g. the rules for how an order is processed through order entry).
3. Data Storage Layer (Persistence Layer or Data Access layer).

This layer traditionally consists of the actual Data store (e.g. a relational database) and the retrieving and updating of the Business Objects from the Data Store. This layer can also be divided into two parts: Data Storage and object persistence.  Data Storage involves the actual physical storage and management of data using SQL Server, Oracle, XML, WebServices, while object persistence refers to the synchronisation of the Business Objects’ state to the datastore.

For our purposes the traditional 3 layered architecture will be further broken down and will include the datastore thus providing us with 6 layers.
 
$FIGURE$:Figure2-2.vsd:The traditional 3 layered architecture further subdivided

$H4$: The UI/Presentation Layer

The separation of the Presentation layer into a UI View layer and a UI Process layer may not be immediately obvious to Windows developers but to a web developer it is more obvious,
1. The UI View Layer would be the web browser, style sheets, javascript etc .
2. The UI Process layer is all the logic related to mapping business object data to controls, handling UI Events etc.

$H4$: Business Logic Layer (Domain model + Application logic)

1. The business process layer. This layer is used to manage process logic. For instance, for the process of order entry the user must select the customer, select a product and enter a quantity. At this point the system will do a credit check. If the credit check passes, the order entry capture may continue, otherwise the order will be placed on hold and forwarded to a senior manager for approval. This layer is often called the workflow layer or the application logic layer. This layer is only required where complex process logic (workflow logic) exists.
2. The other type of business logic that is modelled in the business logic layer is the static model of the business. The static model consists of 
2.1. The classes of concern in the problem domain and the relationship between these classes e.g. an order will reference one customer and will consist of one or more order items.
2.2. The rules for a class e.g. an order with order items cannot be deleted. 
2.3. The properties of an order e.g. an order has an order number, order date and expected delivery date. 
2.4. The property rules for the properties of a class e.g.
2.4.1. An order number and order date are compulsory. When an order is captured the order date must be less than today and within the last 2 months. 
2.4.2. The order number and order date cannot be edited once the order has been persisted.
2.4.3. The expected delivery date cannot be captured for a new order.

Many applications and architectures implement these two sub layers in one layer. It is however better to separate them out for the simple reason that the business process layer is likely to be subject to relatively frequent change whereas the static business model is usually subject to significantly less change. For this reason they should be separated so as to isolate the changes and simplify change management.

$H4$: Data Storage Layer (Persistance Layer)

The data storage layer is the architectural layer that is related to the storage and retrieval of business objects.
 
The business objects may be stored in multiple formats e.g. Relational databases, Files, XML Files, Object databases or Web Services. Regardless of the data storage mechanism, the business objects typically require the ability to Create, Read, Update and Delete (CRUD) themselves from the data store. A single system may in fact have business objects from multiple datastores.

The Data Storage Layer of the architecture is therefore also logically divided into two parts:
1. The actual physical storage and retrieval of the data. In the case of storage in a relational database the data will be stored using a relational database management system (RDBMS, e.g. MySQL, Firebird, MS SQL and Oracle). This object data is retrieved and stored in the data store via the use of either SQL or stored procedures. The physical storage of the data thus forms one sub layer.
2. In Dot Net any data retrieved from a relational data base is typically read into an ADO.Net dataset or data reader. The relevant data from this dataset is then used by the Business Objects e.g. Order and order item.

$REVIEW{

Differentiating between the presentation layer and the domain layer. It is often  difficult to differentiate between these two layers since they interact strongly to provide the user with their total experience. The guideline we use is that if you are developing a Web Application, any logic that would be duplicated when replacing this with a windows application should be in the domain layer.

Object Modelling objects about behaviour i.e. non duplication of code. Relational modeling about data i.e. non duplication of data. This can often result in a mismatch between the data model and the object model. This is commonly known as the object relational impedence or mismatch. By using the various patterns proposed in …. Enterprise architecture book? And allowing the modeling of these this mismatch can be eliminated.

Upgrading and integrating with legacy systems where the existing database(s) may have design flaws and cannot be redesigned. The architecture must allow the developer to implement his/her own ORM strategy for that object.

Generatability- Minimum number and size of templates, minimum code generation and duplication in templates. Principle if you have to duplicate then have a single store and generate the remainder.
Scaleable.
High performance.
Extendable
Testability.
Incremental implementation and total lifecycle management of the software solution.
Security and access control
Transactional support.
Concurrency control.
Duplicate object control
Business object Property rules
Custom and standard property rules – Standard rules. There are a number of standard rules that are applied in many situations e.g. a property is compulsory. In addition each data type will have a particular standard rules e.g. A string length min and max and pattern match. These are modeled and are therefore implemented with no code for the developer. The architecture also allows the capturing of custom rules e.g. A property value must be greater than another property value. These custom rules can easily be programmed and applied by inheriting from ..??
IDataErrorInfo – allow grid or error provider to automatically provide support for showing invalid data.
Undoable: the business object and each of its properties must have the capability to undo i.e. where the user makes edits to the business object and then chooses to cancel or closes the form and the user objects state must be cancelled.
Multiple datasources.

Frameworks:- A frameworks is a set of cooperating classes that make up a reusable design for a specific class of software. A framework provides architectural guidance by partitioning the design into abstract classes and defining their responsibilities and collaborations. A framework captures the design decisions that are common in the application domain and thus emphasis design as well as code reuse. A framework will usually include a set of concrete subclasses that can be used as is. A framework will usually implement many design patterns. In fact a framework can be viewed as an implementation of a system of design patterns.

$PICKLE$: Coupling

Modules (Classes/packages) should be as independent as possible. Coupling is therefore a measure of the level of dependency between two modules.

$PICKLE$: Cohesion 

Degree to which modules instructions are functionally related to each other. Highly cohesive modules contain instructions that collectively work together to solve specific tasks. The goal is to ensure that the modules exhibit a high degree of cohesiveness. 

$PICKLE$: Object oriented design axioms

Axiom 1:- independence maintain the independence of the components.
Axiom 2:- Information. Minimise the information content of the design. 
Occams razor:- The best theory explains the known fact with the minimum amount of complexity and maximum simplicity and straightforwardness. 

$PICKLE$: Corollaries

Corollary 1: Uncoupled design with less information content. Highly cohesive classes and components can reduce coupling because only the minimum amount of essential information need be passed between objects.
Corollary 2: Single Purpose each class/component/method must have a single, clearly defined purpose. If you cannot clearly define the purpose of the class etc in a few sentences then you probably have not achieved this.
Corollary 3: A Large number of simple classes.
Corollary 4: Strong mapping. There should be a strong mapping between the physical system and the logical design.
Corollary 5: Standardisation. Promote standardisation by promoting interchangeable components and promoting reuse of existing classes/components.
Corollary 6: Design with inheritance. Common behaviour should be abstracted to superclasses.
Corollary 7: Design with interfaces.

Tracking an objects state, IsDirty IsNew, IsValid etc.
Object analysis and modeling.
Relationships between classes
1. Inheritance.
2. 1:M referenced.
3. Lookup lists.
4. 1:M composite.
5. M:M referenced.

BindingList why not using this for binding to forms and grids. System.ComponentModel.IEditableObject and System.ComponentModel.IDataErrorInfo.
Sorted views of collections. Rocky chapter 2 pg 87.

Command execution. Frequently the programmer tasks are related to updating and editing business objects. But there are also many times when the developer is required to execute a command or bulk task e.g. calculate depreciation at the end of each month. The execution of this type of command should be carried out in the logic layer. Where the logic layer acts on the business objects. In cases where the performance ?? move to a later section.

$H4$: Defining Layers

User Inteface generalization and generation.
The generalization of the user interface is significantly more difficult than the generalization of the Business object layer. The reasons for this are that the flexibility and adaptability of the user interface design are in many cases what gives an application its uniqueness. Having said that we have found in our development that between 60 and 90% of a business application can be used from generated controls and forms. In addition to this the ability to rapidly produce an application with standardised generated forms contributes significantly to the ability to produce and useable system quickly as per the agile methodology.

$H4$: MetaProgramming.

Resource localization for language independence: NNB there was a tool to do this see my brain add ins.

$H4$: Reporting

DataAdaptor: Many reporting tools e.g. Crystal are still very much focused on the model of reading data directly from a database using SQL or stored procedures. 

In some cases for performance reasons this is the correct approach. More frequently the approach of using SQL or stored procedures to retrieve and manipulate data directly results in duplication of logic (i.e. logic that is already tested and working in the business objects is duplicated in the report). Reports that cannot be tested using automated test tools such as NUnit. In these cases what the developer requires is the ability to produce the objects to a report. In these cases Active reports provides a better model for achieving this but if for whatever reasons another reporting tool such as crystal reports is used then a dataadaptor can be used the dataadaptor will provides the ability to transform a business object into a dataset. Which can be used as the datasource of a report. This cannot be used for large datasets but is usually preferred for most reports required. For a more complete discussion see reporting??
}$ 
